!function(){var t="(max-width: 50rem)";class e extends class{_KEYS={ESC:27,SPACE:32,ENTER:13,TAB:9,ARROW_LEFT:37,ARROW_UP:38,ARROW_RIGHT:39,ARROW_DOWN:40};#focusableElements='a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), select, details, audio, video, object, [contenteditable=""], [contenteditable="true"], [tabindex]:not([tabindex="-1"])';#defaultOptions={focusTrap:!1,collapseOnFocusOut:!1};#destroyed=!1;constructor(t){this._options=Object.assign(this.#defaultOptions,t),this._$el=document.querySelector(this._options.selector),this.#check()?(this._getFocusableContent(),this._$lastFocusableEl=this._$el.querySelector('[data-select-last="true"]'),this.#init()):this._hasErrors=!0}#check(){return this._$el?!(void 0!==this._options.matchMedia&&!window.matchMedia(this._options.matchMedia).matches):(console.error("Не найден класс - "+this._options.selector),!1)}#init(){this._$el.addEventListener("click",t=>this._mainElClick(t)),this._$el.addEventListener("keydown",t=>this._checkPress(t),!0),this._$lastFocusableEl&&(this._$lastFocusableEl.tabIndex=-1),this._$focusableContent=this._$focusableContent.filter(t=>{if(t!==this._$lastFocusableEl)return t})}#focusTrapAndCollapse(t){const e=this._$focusableContent[0],s=this._$focusableContent[this._$focusableContent.length-1],i=this._$lastFocusableEl;t.shiftKey?document.activeElement!==e&&document.activeElement!==i||(i&&document.activeElement!==i&&!this._options.collapseOnFocusOut?i.focus():(this._options.collapseOnFocusOut&&this.close(),s.focus()),t.preventDefault()):document.activeElement!==s&&document.activeElement!==i||(i&&document.activeElement!==i?i.focus():(this._options.collapseOnFocusOut&&this.close(),e.focus()),t.preventDefault())}_checkPress(t){t.keyCode===this._KEYS.ESC&&this.close(),"Tab"!==t.key&&t.keyCode!==this._KEYS.TAB||(this._options.focusTrap||this._options.collapseOnFocusOut)&&this.#focusTrapAndCollapse(t)}_mainElClick(t){(t.target.closest('[data-close="true"]')||t.target.dataset.close)&&this.close()}_getFocusableContent(){this._$focusableContent=[...this._$el.querySelectorAll(this.#focusableElements)]}open(){if(this.#destroyed)return console.error(`Объект с классом - ${this._options.selector} уничтожен и не может быть "Открыт"`);this._options.activeClass?this._$el.classList.add(this._options.selector.slice(1)+this._options.activeClass):this._$el.removeAttribute("hidden",""),document.body.style.overflow="hidden"}close(){this.destroy(),this._options.activeClass?this._$el.classList.remove(this._options.selector.slice(1)+this._options.activeClass):this._$el.setAttribute("hidden",""),document.body.style.overflow=""}destroy(){this._$el.removeEventListener("click",t=>this._mainElClick(t)),this._$el.removeEventListener("keydown",t=>this._checkPress(t),!0)}}{#defaultOptions={overlay:!0,overlayBg:"rgba(0,0,0, 0.5)",overlayZindex:"0"};#OVERLAY_ANIMTAION_TIME=300;#$activeOpenBtn;constructor(t){super(t),this.#check()&&(this._options=Object.assign(this.#defaultOptions,this._options),this._$openBtns=document.querySelectorAll(this._options.openBtnsSelector),this.#init())}#check(){return!this._hasErrors}#init(){if(this._$el.setAttribute("role","dialog"),this._$el.setAttribute("aria-modal","true"),this._$el.setAttribute("aria-hidden","true"),this._options.overlay){const t=document.createElement("div");t.style.backgroundColor=this._options.overlayBg,t.style.position="fixed",t.style.inset="auto",t.style.opacity=0,t.classList.add(this._options.selector.slice(1)+"__overlay"),t.style.zIndex=this._options.overlayZindex,t.style.transition=`all ${this.#OVERLAY_ANIMTAION_TIME}ms ease`,t.addEventListener("click",this.close.bind(this)),"static"===this._$el.querySelector(":first-child").style.position&&(this._$el.querySelector(":first-child").style.position="relative"),this._$el.querySelector(":first-child").style.zIndex=toString(parseInt(this._options.overlayZindex)+1),this._$el.insertBefore(t,this._$el.firstChild)}this._options.activeClass&&this._$focusableContent.forEach(t=>{t.tabIndex=-1}),this._$openBtns&&this._$openBtns.forEach(t=>{t.setAttribute("aria-haspopup","dialog"),t.addEventListener("click",this.open.bind(this))})}open(){setTimeout(()=>{"false"!==this._$el.getAttribute("aria-hidden")?(this.#$activeOpenBtn=document.activeElement,super.open(),this._options.activeClass&&this._$focusableContent.forEach(t=>{t.dataset.selectLast||t.removeAttribute("tabindex")}),this._$el.setAttribute("aria-hidden","false"),0<this._$focusableContent.length&&this._$focusableContent[0].focus(),this._$el.querySelector(":first-child").style.inset="0",this._$el.querySelector(":first-child").style.opacity="1"):this.close()},1)}close(){super.close(),this._options.activeClass&&this._$focusableContent.forEach(t=>{t.tabIndex=-1}),setTimeout(()=>{-1!==this.#$activeOpenBtn.tabIndex&&this.#$activeOpenBtn.focus(),"function"==typeof this._options.onClose&&this._options.onClose()},1),this._$el.querySelector(":first-child").style.opacity="0",setTimeout(()=>{this._$el.querySelector(":first-child").style.inset="auto"},this.#OVERLAY_ANIMTAION_TIME),this._$el.setAttribute("aria-hidden","true")}}(class{constructor(t){this.constructorOptions=t,this.init()}static init(){this.options=Object.assign({errorClassName:"appointment-form__error",inputClassName:"input",invalidClassName:"invalid",errors:{required:"Заполните обязательное поле",email:"Пожалуйста, введите правильный email",type:"Не соответствует формату поля",pattern:"Не соответствует формату поля",tooShort:"Слишком короткое",tooLong:"Слишком динное",stepMismatch:"Неверный шаг (введенный диапозон)",rangeUnderflow:"Меньше диапозона",rangeOverflow:"Больше диапозона",customError:"Ошибка",badInput:"badInput"}},this.constructorOptions),this.forms=document.querySelectorAll("form"),this.forms||console.error("Форма на странице не найдена"),this.forms.forEach(t=>{const e=t.querySelectorAll("input");e.forEach(t=>{const e=document.createElement("span");e.classList.add(this.options.errorClassName),e.setAttribute("aria-live","polite"),t.insertAdjacentElement("afterend",e),t.addEventListener("blur",t=>this.validate(t))}),t.addEventListener("submit",t=>{this.checkValid(t)})})}static validate(t){const e=(t=t.target?t.target:t).nextElementSibling;if(!t.validity.valid){if(t.validity.valueMissing)return this.setInvalid(t,this.options.errors.required),e;if(t.validity.typeMismatch)return this.setInvalid(t,this.options.errors.type),e;if(t.validity.patternMismatch)return this.setInvalid(t,this.options.errors.pattern),e;if(t.validity.tooShort)return this.setInvalid(t,this.options.errors.tooShort),e;if(t.validity.tooLong)return this.setInvalid(t,this.options.errors.tooLong),e;if(t.validity.stepMismatch)return this.setInvalid(t,this.options.errors.stepMismatch),e;if(t.validity.rangeUnderflow)return this.setInvalid(t,this.options.errors.rangeUnderflow),e;if(t.validity.rangeOverflow)return this.setInvalid(t,this.options.errors.rangeOverflow),e;if(t.validity.customError)return this.setInvalid(t,this.options.errors.customError),e;if(t.validity.badInput)return this.setInvalid(t,this.options.errors.badInput),e}t.classList.remove(this.options.inputClassName+"--"+this.options.invalidClassName),e.innerHTML=""}static setInvalid(t,e){const s=t.nextElementSibling;t.classList.add(this.options.inputClassName+"--"+this.options.invalidClassName),s.innerHTML=e}static checkValid(t){let e=new Array;const s="object"==typeof t.currentTarget?t.currentTarget:t,i=s.querySelectorAll("input");if("object"==typeof t.currentTarget&&t.preventDefault(),i.forEach(t=>{e.push(this.validate(t))}),e=e.filter(function(t){return void 0!==t}),0===e.length)return s.submit(),!0;e[0].previousSibling.focus()}}).init();new e({selector:".nav",openBtnsSelector:['[data-name="header-modal"]'],focusTrap:!0,collapseOnFocusOut:!1,activeClass:"--active",overlay:!1,matchMedia:t});const i=document.querySelector(".discover"),o=document.querySelector(".discover__burger");if(window.addEventListener("load",function(t){i.classList.remove("loading"),o.classList.add("descover__first");const e=o.getAnimations().length;let s=0;o.addEventListener("animationend",()=>{s++,s===e&&(o.classList.remove("descover__first"),o.dataset.type="explosion")}),function(){const c=document.querySelector("#ingredient"),d=document.querySelector(".ingredients");let e;!function(t,e){var s=new XMLHttpRequest;s.overrideMimeType("application/json"),s.open("GET",t,!0),s.onreadystatechange=function(){4===s.readyState&&"200"==s.status&&e(s.responseText)},s.send(null)}("../files/data/data.json",function(t){e=JSON.parse(t),e.forEach((t,e)=>{if(t.auto)return u.push(t),void 0;const s=c.content.cloneNode(!0),i=document.createElement("img"),o=s.querySelector(".ingredient__name"),a=s.querySelector(".ingredient__plus"),n=s.querySelector(".ingredient__minus");var r=s.querySelector(".ingredient__amount");i.classList.add("ingredient__img"),i.src=t.img,o.innerHTML=t.name,d.appendChild(s);const l=d.querySelector(".ingredient:last-of-type");l.insertBefore(i,o),t.amount=r,a.addEventListener("click",()=>h(t)),n.addEventListener("click",()=>m(t))}),h(u[1])})}()}),window.matchMedia(t).matches){const S=document.querySelector('.nav__item[href="#burger"]'),$=document.querySelector('.nav__item[href="#discover"]'),q=document.querySelector("#burger");window.onscroll=()=>{!function(t){t=t.getBoundingClientRect();return 0<=t.top&&0<=t.left&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}(q)?($.setAttribute("aria-selected","true"),S.removeAttribute("aria-selected")):(S.setAttribute("aria-selected","true"),$.removeAttribute("aria-selected"))}}else{const C=document.querySelector(".nav__box"),O=[...document.querySelectorAll(".tab-item")],L=[...document.querySelectorAll(".tab-panel")];let o=0;C.setAttribute("role","tablist"),O[o].setAttribute("aria-selected","true"),L.forEach(t=>t.setAttribute("role","tabpanel")),L.filter((t,e)=>e!==o).forEach(t=>{t.hidden=!0}),O.forEach((e,t)=>{e.setAttribute("role","tab");const s=e.querySelector("a");s.getAttribute("href").slice(1);s.setAttribute("role","presentation"),s.setAttribute("tabindex","0"),s.removeAttribute("href"),e.setAttribute("id","tab-"+t),e.setAttribute("aria-controls","panel-"+t),e.dataset.number&&(t=parseInt(e.dataset.number)),L[t].setAttribute("id","panel-"+t),L[t].setAttribute("aria-labelledby","tab-"+t);const i=t=>{o=O.indexOf(t),t.dataset.number&&(o=parseInt(t.dataset.number)),O[o].setAttribute("aria-selected","true"),O[o].querySelector("a").setAttribute("aria-selected","true"),L[o].hidden=!1,O.filter((t,e)=>e!==o).forEach(t=>{t.setAttribute("aria-selected","false"),t.querySelector("a").setAttribute("aria-selected","false")}),L.filter((t,e)=>e!==o).forEach(t=>{t.hidden=!0})};e.addEventListener("click",()=>i(e)),e.addEventListener("keydown",t=>{13===t.keyCode&&i(e)})})}const a=document.querySelector(".burger__checkout-summ"),n=[...document.querySelectorAll(".burger__summary-data-name")],u=[],h=s=>{a.dataset.price=(parseFloat(a.dataset.price)+s.price).toFixed(2),n.forEach(t=>{if("min"===t.dataset.name&&(t.dataset.value=(parseFloat(t.dataset.value)+s.min).toFixed(2)),"oz"===t.dataset.name&&(t.dataset.value=(parseFloat(t.dataset.value)+s.oz).toFixed(1)),"kcal"===t.dataset.name){const e=parseFloat(t.dataset.value)+s.kcal;t.dataset.value=e.toFixed(0),f(e)}}),s.amount&&s.amount.dataset.value++;var t=[...l.querySelectorAll(".burger__scene-element")];v&&(clearTimeout(v),v=null),null!==l.querySelector(`[data-name="${u[0].name}"]`)&&m(u[0]),0<t.length&&(v=setTimeout(()=>{h(u[0]),clearTimeout(v),v=null},r)),function(t){const e=document.createElement("img"),s=d+t.width;e.classList.add("burger__scene-element"),e.src=t.img_group||t.img,e.setAttribute("alt",t.name),e.setAttribute("data-name",t.name),e.style.bottom=s+"%",e.style.opacity=0,_=t.width*p,l.appendChild(e),setTimeout(()=>{e.style.bottom=c+"%",e.style.opacity=1,c+=t.width+_},1),Math.floor(c)}(s)},m=s=>{v&&(clearTimeout(v),v=null),s.amount&&0===parseInt(s.amount.dataset.value)||(a.dataset.price=(parseFloat(a.dataset.price)-s.price).toFixed(2),n.forEach(t=>{if("min"===t.dataset.name&&(t.dataset.value=(parseFloat(t.dataset.value)-s.min).toFixed(0)),"oz"===t.dataset.name&&(t.dataset.value=(parseFloat(t.dataset.value)-s.oz).toFixed(1)),"kcal"===t.dataset.name){const e=parseFloat(t.dataset.value)-s.kcal;t.dataset.value=e.toFixed(0),f(e)}}),s.amount&&s.amount.dataset.value--,function(e){const t=l.querySelectorAll(`[data-name="${e.name}"]`),s=t[t.length-1];if(s){const a=[...l.querySelectorAll(".burger__scene-element")];var i=a.indexOf(s);s.classList.add("burger__scene-element--delete"),s.dataset.name="delete",s.addEventListener("animationend",()=>{l.removeChild(s)}),_=e.width*p,c-=e.width+_;for(let t=i+1;t<a.length;t++){const n=a[t];var o=parseInt(n.style.bottom,10)-e.width-_;n.style.bottom=o+"%"}}Math.floor(c)}(s))};const r=3e3,l=document.querySelector(".burger__scene");let c=0;const d=80,p=window.matchMedia(t).matches?0:.4;let _,v;const s=document.querySelector(".burger__question"),f=t=>{3e3<t?s.classList.add("msg--show"):s.classList.remove("msg--show")},b=document.querySelector(".burger__ketchup"),y=document.querySelector(".burger__additionally"),g=y.querySelector(".burger__additionally-name"),E=y.querySelector(".burger__additionally-params").dataset.value,A=document.querySelector('.burger__summary-data-name[data-name="oz"]');y.addEventListener("click",()=>{b.classList.toggle("burger__ketchup--show"),"+"===g.dataset.content?(g.dataset.content="-",A.dataset.value=(parseFloat(A.dataset.value)+parseFloat(E)).toFixed(1)):(g.dataset.content="+",A.dataset.value=(parseFloat(A.dataset.value)-parseFloat(E)).toFixed(1))});new e({selector:".nav__person-menu",openBtnsSelector:[".nav__person"],focusTrap:!1,collapseOnFocusOut:!0,activeClass:"--active",overlay:!1})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
