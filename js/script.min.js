!function(){var e="(max-width: 50rem)";class t{_KEYS={ESC:27,SPACE:32,ENTER:13,TAB:9,ARROW_LEFT:37,ARROW_UP:38,ARROW_RIGHT:39,ARROW_DOWN:40};#focusableElements='a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), select, details, audio, video, object, [contenteditable=""], [contenteditable="true"], [tabindex]:not([tabindex="-1"])';#defaultOptions={focusTrap:!1,collapseOnFocusOut:!1};#destroyed=!1;constructor(e){this._options=Object.assign(this.#defaultOptions,e),this._$el=document.querySelector(this._options.selector),this.#check()?(this._getFocusableContent(),this._$lastFocusableEl=this._$el.querySelector('[data-select-last="true"]'),this.#init()):this._hasErrors=!0}#check(){return this._$el?!(void 0!==this._options.matchMedia&&!window.matchMedia(this._options.matchMedia).matches):(console.error("Не найден класс - "+this._options.selector),!1)}#init(){this._$el.addEventListener("click",e=>this._mainElClick(e)),this._$el.addEventListener("keydown",e=>this._checkPress(e),!0),this._$lastFocusableEl&&(this._$lastFocusableEl.tabIndex=-1),this._$focusableContent=this._$focusableContent.filter(e=>{if(e!==this._$lastFocusableEl)return e})}#focusTrapAndCollapse(e){const t=this._$focusableContent[0],s=this._$focusableContent[this._$focusableContent.length-1],i=this._$lastFocusableEl;e.shiftKey?document.activeElement!==t&&document.activeElement!==i||(i&&document.activeElement!==i&&!this._options.collapseOnFocusOut?i.focus():(this._options.collapseOnFocusOut&&this.close(),s.focus()),e.preventDefault()):document.activeElement!==s&&document.activeElement!==i||(i&&document.activeElement!==i?i.focus():(this._options.collapseOnFocusOut&&this.close(),t.focus()),e.preventDefault())}_checkPress(e){e.keyCode===this._KEYS.ESC&&this.close(),"Tab"!==e.key&&e.keyCode!==this._KEYS.TAB||(this._options.focusTrap||this._options.collapseOnFocusOut)&&this.#focusTrapAndCollapse(e)}_mainElClick(e){(e.target.closest('[data-close="true"]')||e.target.dataset.close)&&this.close()}_getFocusableContent(){this._$focusableContent=[...this._$el.querySelectorAll(this.#focusableElements)]}open(){if(this.#destroyed)return console.error(`Объект с классом - ${this._options.selector} уничтожен и не может быть "Открыт"`);this._options.activeClass?this._$el.classList.add(this._options.selector.slice(1)+this._options.activeClass):this._$el.removeAttribute("hidden",""),document.body.style.overflow="hidden"}close(){this.destroy(),this._options.activeClass?this._$el.classList.remove(this._options.selector.slice(1)+this._options.activeClass):this._$el.setAttribute("hidden",""),document.body.style.overflow=""}destroy(){this._$el.removeEventListener("click",e=>this._mainElClick(e)),this._$el.removeEventListener("keydown",e=>this._checkPress(e),!0)}}class s extends t{#defaultOptions={overlay:!0,overlayBg:"rgba(0,0,0, 0.5)",overlayZindex:"0"};#OVERLAY_ANIMTAION_TIME=300;#$activeOpenBtn;constructor(e){super(e),this.#check()&&(this._options=Object.assign(this.#defaultOptions,this._options),this._$openBtns=document.querySelectorAll(this._options.openBtnsSelector),this.#init())}#check(){return!this._hasErrors}#init(){if(this._$el.setAttribute("role","dialog"),this._$el.setAttribute("aria-modal","true"),this._$el.setAttribute("aria-hidden","true"),this._options.overlay){const e=document.createElement("div");e.style.backgroundColor=this._options.overlayBg,e.style.position="fixed",e.style.inset="auto",e.style.opacity=0,e.classList.add(this._options.selector.slice(1)+"__overlay"),e.style.zIndex=this._options.overlayZindex,e.style.transition=`all ${this.#OVERLAY_ANIMTAION_TIME}ms ease`,e.addEventListener("click",this.close.bind(this)),"static"===this._$el.querySelector(":first-child").style.position&&(this._$el.querySelector(":first-child").style.position="relative"),this._$el.querySelector(":first-child").style.zIndex=toString(parseInt(this._options.overlayZindex)+1),this._$el.insertBefore(e,this._$el.firstChild)}this._options.activeClass&&this._$focusableContent.forEach(e=>{e.tabIndex=-1}),this._$openBtns&&this._$openBtns.forEach(e=>{e.setAttribute("aria-haspopup","dialog"),e.addEventListener("click",this.open.bind(this))})}open(){setTimeout(()=>{"false"!==this._$el.getAttribute("aria-hidden")?(this.#$activeOpenBtn=document.activeElement,super.open(),this._options.activeClass&&this._$focusableContent.forEach(e=>{e.dataset.selectLast||e.removeAttribute("tabindex")}),this._$el.setAttribute("aria-hidden","false"),0<this._$focusableContent.length&&this._$focusableContent[0].focus(),this._$el.querySelector(":first-child").style.inset="0",this._$el.querySelector(":first-child").style.opacity="1"):this.close()},1)}close(){super.close(),this._options.activeClass&&this._$focusableContent.forEach(e=>{e.tabIndex=-1}),setTimeout(()=>{-1!==this.#$activeOpenBtn.tabIndex&&this.#$activeOpenBtn.focus(),"function"==typeof this._options.onClose&&this._options.onClose()},1),this._$el.querySelector(":first-child").style.opacity="0",setTimeout(()=>{this._$el.querySelector(":first-child").style.inset="auto"},this.#OVERLAY_ANIMTAION_TIME),this._$el.setAttribute("aria-hidden","true")}}new s({selector:".nav",openBtnsSelector:['[data-name="header-modal"]'],focusTrap:!0,collapseOnFocusOut:!1,activeClass:"--active",overlay:!1,matchMedia:e});const i=document.querySelector(".discover"),o=document.querySelector(".discover__burger");if(window.addEventListener("load",function(e){i.classList.remove("loading"),o.classList.add("descover__first");const t=o.getAnimations().length;let s=0;o.addEventListener("animationend",()=>{s++,s===t&&(o.classList.remove("descover__first"),o.dataset.type="explosion")}),function(){const c=document.querySelector("#ingredient"),d=document.querySelector(".ingredients");let t;!function(e,t){var s=new XMLHttpRequest;s.overrideMimeType("application/json"),s.open("GET",e,!0),s.onreadystatechange=function(){4===s.readyState&&"200"==s.status&&t(s.responseText)},s.send(null)}("../files/data/data.json",function(e){t=JSON.parse(e),t.forEach((e,t)=>{if(e.auto)return u.push(e),void 0;const s=c.content.cloneNode(!0),i=document.createElement("img"),o=s.querySelector(".ingredient__name"),a=s.querySelector(".ingredient__plus"),n=s.querySelector(".ingredient__minus");var l=s.querySelector(".ingredient__amount");i.classList.add("ingredient__img"),i.src=e.img,o.innerHTML=e.name,d.appendChild(s);const r=d.querySelector(".ingredient:last-of-type");r.insertBefore(i,o),e.amount=l,a.addEventListener("click",()=>h(e)),n.addEventListener("click",()=>_(e))}),h(u[1])})}()}),window.matchMedia(e).matches){const C=document.querySelector('.nav__item[href="#burger"]'),O=document.querySelector('.nav__item[href="#discover"]'),F=document.querySelector("#burger");window.onscroll=()=>{!function(e){e=e.getBoundingClientRect();return 0<=e.top&&0<=e.left&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}(F)?(O.setAttribute("aria-selected","true"),C.removeAttribute("aria-selected")):(C.setAttribute("aria-selected","true"),O.removeAttribute("aria-selected"))}}else{const k=document.querySelector(".nav__box"),w=[...document.querySelectorAll(".tab-item")],L=[...document.querySelectorAll(".tab-panel")];let o=0;k.setAttribute("role","tablist"),w[o].setAttribute("aria-selected","true"),L.forEach(e=>e.setAttribute("role","tabpanel")),L.filter((e,t)=>t!==o).forEach(e=>{e.hidden=!0}),w.forEach((t,e)=>{t.setAttribute("role","tab");const s=t.querySelector("a");s.getAttribute("href").slice(1);s.setAttribute("role","presentation"),s.setAttribute("tabindex","0"),s.removeAttribute("href"),t.setAttribute("id","tab-"+e),t.setAttribute("aria-controls","panel-"+e),t.dataset.number&&(e=parseInt(t.dataset.number)),L[e].setAttribute("id","panel-"+e),L[e].setAttribute("aria-labelledby","tab-"+e);const i=e=>{o=w.indexOf(e),e.dataset.number&&(o=parseInt(e.dataset.number)),w[o].setAttribute("aria-selected","true"),w[o].querySelector("a").setAttribute("aria-selected","true"),L[o].hidden=!1,w.filter((e,t)=>t!==o).forEach(e=>{e.setAttribute("aria-selected","false"),e.querySelector("a").setAttribute("aria-selected","false")}),L.filter((e,t)=>t!==o).forEach(e=>{e.hidden=!0})};t.addEventListener("click",()=>i(t)),t.addEventListener("keydown",e=>{13===e.keyCode&&i(t)})})}const a=document.querySelector(".burger__checkout-summ"),n=[...document.querySelectorAll(".burger__summary-data-name")],u=[],h=s=>{a.dataset.price=(parseFloat(a.dataset.price)+s.price).toFixed(2),n.forEach(e=>{if("min"===e.dataset.name&&(e.dataset.value=(parseFloat(e.dataset.value)+s.min).toFixed(2)),"oz"===e.dataset.name&&(e.dataset.value=(parseFloat(e.dataset.value)+s.oz).toFixed(1)),"kcal"===e.dataset.name){const t=parseFloat(e.dataset.value)+s.kcal;e.dataset.value=t.toFixed(0),g(t)}}),s.amount&&s.amount.dataset.value++,function(e){var t=[...r.querySelectorAll(".burger__scene-element")];y&&(clearTimeout(y),y=null);0<t.length&&(y=setTimeout(()=>{h(u[0]),clearTimeout(y),y=null},l));null!==r.querySelector(`[data-name="${u[0].name}"]`)&&(_(u[0]),c-=u[0].width);const s=document.createElement("img"),i=d+e.width;s.classList.add("burger__scene-element"),s.src=e.img_group||e.img,s.setAttribute("alt",e.name),s.setAttribute("data-name",e.name),s.style.bottom=i+"%",s.style.opacity=0,v=e.width*b,r.appendChild(s),setTimeout(()=>{s.style.bottom=c+"%",s.style.opacity=1,c+=e.width+v},1)}(s)},_=s=>{s.amount&&0===parseInt(s.amount.dataset.value)||(a.dataset.price=(parseFloat(a.dataset.price)-s.price).toFixed(2),n.forEach(e=>{if("min"===e.dataset.name&&(e.dataset.value=(parseFloat(e.dataset.value)-s.min).toFixed(0)),"oz"===e.dataset.name&&(e.dataset.value=(parseFloat(e.dataset.value)-s.oz).toFixed(1)),"kcal"===e.dataset.name){const t=parseFloat(e.dataset.value)-s.kcal;e.dataset.value=t.toFixed(0),g(t)}}),s.amount&&s.amount.dataset.value--,function e(t){if(m)return void p.push(t);y&&(clearTimeout(y),y=null);m=!0;const s=r.querySelectorAll(`[data-name="${t.name}"]`);if(0<s.length){const i=[...r.querySelectorAll(".burger__scene-element")],o=i.indexOf(s[s.length-1]);s[s.length-1].classList.add("burger__scene-element--delete"),s[s.length-1].addEventListener("animationend",()=>{r.removeChild(s[s.length-1]),m=!1,0<p.length&&(e(p[0]),p.shift())}),v=t.width*b,c-=t.width-v;for(let e=o+1;e<i.length;e++){const a=i[e],n=parseInt(a.style.bottom,10)-t.width-v;a.style.bottom=n+"%"}}}(s))};const l=3e3,r=document.querySelector(".burger__scene");let c=0;const d=80;let m=!1,p=[];const b=window.matchMedia(e).matches?0:.4;let v,y;const f=document.querySelector(".burger__question"),g=e=>{3e3<e?f.classList.add("msg--show"):f.classList.remove("msg--show")},E=document.querySelector(".burger__ketchup"),A=document.querySelector(".burger__additionally"),S=A.querySelector(".burger__additionally-name"),$=A.querySelector(".burger__additionally-params").dataset.value,q=document.querySelector('.burger__summary-data-name[data-name="oz"]');A.addEventListener("click",()=>{E.classList.toggle("burger__ketchup--show"),"+"===S.dataset.content?(S.dataset.content="-",q.dataset.value=(parseFloat(q.dataset.value)+parseFloat($)).toFixed(1)):(S.dataset.content="+",q.dataset.value=(parseFloat(q.dataset.value)-parseFloat($)).toFixed(1))});new s({selector:".nav__person-menu",openBtnsSelector:[".nav__person"],focusTrap:!1,collapseOnFocusOut:!0,activeClass:"--active",overlay:!1})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
